generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String?         @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             UserRole        @default(USER)
  isActive         Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  phone            String?
  country          String?
  timezone         String?
  referralCode     String?         @unique
  referredBy       String?
  referralCount    Int             @default(0)
  referralEarnings Decimal         @default(0) @db.Decimal(10, 2)
  accounts         Account[]
  affiliateLinks   AffiliateLink[]
  notifications    Notification[]
  orders           Order[]
  sessions         Session[]
  userPlans        UserPlan[]
  profile          UserProfile?

  @@map("users")
}

model UserProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  dateOfBirth       DateTime?
  address           String?
  city              String?
  state             String?
  postalCode        String?
  preferredLanguage String    @default("en")
  marketingEmails   Boolean   @default(true)
  twoFactorEnabled  Boolean   @default(false)
  lastLoginAt       DateTime?
  loginCount        Int       @default(0)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Plan {
  id                String        @id @default(cuid())
  price             Decimal       @db.Decimal(10, 2)
  status            PlanStatus    @default(DRAFT)
  isPopular         Boolean       @default(false)
  features          String[]
  maxSpeed          String?
  activationType    String        @default("INSTANT")
  stockQuantity     Int?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  categoryId        String?
  esimAccessData    Json?
  esimAccessId      String?       @unique
  isEsimEnabled     Boolean       @default(false)
  appliedMarkupPct  Decimal?      @db.Decimal(10, 2)
  countryName       String?
  csvType           String?
  locationName      String?
  operators         String?
  ourCost           Decimal?      @db.Decimal(10, 2)
  preActivationDays Int?
  proposedPriceUsd  Decimal?      @db.Decimal(10, 2)
  reloadable        Boolean?
  slug              String?       @unique
  sms               String?
  type              String?
  planCategory      String?
  planName          String?
  gbs               Decimal?      @db.Decimal(10, 2)
  days              Int?
  countryCodes      String?
  planId            String?       @unique
  country           String?
  orders            Order[]
  category          PlanCategory? @relation(fields: [categoryId], references: [id])
  userPlans         UserPlan[]

  @@map("plans")
}

model PlanCategory {
  id          String  @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String?
  sortOrder   Int     @default(0)
  isActive    Boolean @default(true)
  plans       Plan[]

  @@map("plan_categories")
}

model Order {
  id                    String         @id @default(cuid())
  orderNumber           String         @unique
  userId                String
  planId                String?
  quantity              Int            @default(1)
  unitPrice             Decimal        @db.Decimal(10, 2)
  totalAmount           Decimal        @db.Decimal(10, 2)
  discountAmount        Decimal        @default(0) @db.Decimal(10, 2)
  finalAmount           Decimal        @db.Decimal(10, 2)
  status                OrderStatus    @default(PENDING)
  promoCodeId           String?
  billingName           String?
  billingEmail          String?
  billingAddress        String?
  billingCity           String?
  billingCountry        String?
  billingPostalCode     String?
  esimCode              String?        @unique
  activationDate        DateTime?
  expiryDate            DateTime?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  paidAt                DateTime?
  esimAccessData        Json?
  esimAccessOrderId     String?
  esimQrCode            String?
  paymentTransactionId  String?
  paypalOrderId         String?
  stripePaymentIntentId String?
  paymentMethod         PaymentMethod?
  paymentStatus         PaymentStatus  @default(PENDING)
  plan                  Plan?          @relation(fields: [planId], references: [id])
  promoCode             PromoCode?     @relation(fields: [promoCodeId], references: [id])
  user                  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  refunds               Refund[]
  userPlans             UserPlan[]

  @@map("orders")
}

model UserPlan {
  id             String    @id @default(cuid())
  userId         String
  planId         String
  orderId        String
  status         String    @default("ACTIVE")
  activationDate DateTime  @default(now())
  expiryDate     DateTime
  dataUsed       String    @default("0MB")
  dataRemaining  String?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  esimAccessData Json?
  esimAccessId   String?
  lastSyncAt     DateTime?
  order          Order     @relation(fields: [orderId], references: [id])
  plan           Plan      @relation(fields: [planId], references: [id])
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, planId, orderId])
  @@map("user_plans")
}

model PromoCode {
  id              String        @id @default(cuid())
  code            String        @unique
  type            PromoCodeType
  value           Decimal       @db.Decimal(10, 2)
  maxDiscount     Decimal?      @db.Decimal(10, 2)
  minOrderAmount  Decimal?      @db.Decimal(10, 2)
  maxUses         Int?
  currentUses     Int           @default(0)
  isActive        Boolean       @default(true)
  validFrom       DateTime      @default(now())
  validUntil      DateTime?
  applicablePlans String[]
  applicableUsers String[]
  description     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  orders          Order[]

  @@map("promo_codes")
}

model AffiliateLink {
  id             String   @id @default(cuid())
  userId         String
  code           String   @unique
  clicks         Int      @default(0)
  conversions    Int      @default(0)
  earnings       Decimal  @default(0) @db.Decimal(10, 2)
  commissionRate Decimal  @default(0.1000) @db.Decimal(5, 4)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("affiliate_links")
}

model Refund {
  id          String    @id @default(cuid())
  orderId     String
  amount      Decimal   @db.Decimal(10, 2)
  reason      String
  status      String    @default("PENDING")
  processedBy String?
  processedAt DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("refunds")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   @default("INFO")
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Analytics {
  id        String   @id @default(cuid())
  eventType String
  eventData Json
  userId    String?
  sessionId String?
  userAgent String?
  ipAddress String?
  referrer  String?
  timestamp DateTime @default(now())

  @@map("analytics")
}

model EsimApiLog {
  id           String   @id @default(cuid())
  endpoint     String
  method       String
  requestData  Json?
  responseData Json?
  statusCode   Int?
  errorMessage String?
  duration     Int?
  timestamp    DateTime @default(now())

  @@map("esim_api_logs")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PlanStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum PromoCodeType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
  LOCAL_CARD
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}
